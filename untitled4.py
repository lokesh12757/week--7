# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p57IlX9aidKau6ZTBBCzWd0RAxX4nOVz
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

Load data
df = pd.read_csv("transaction_data.csv")

Feature engineering
df["transaction_amount"] = df["amount"]
df["location"] = df["city"] + ", " + df["state"]
df["time"] = pd.to_datetime(df["timestamp"])

Split data
X_train, X_test, y_train, y_test = train_test_split(df.drop("is_fraud", axis=1), df["is_fraud"], test_size=0.2, random_state=42)

Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

Evaluate model
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

Deploy model
def detect_fraud(transaction):
    features = pd.DataFrame({"transaction_amount": [transaction["amount"]], "location": [transaction["city"] + ", " + transaction["state"]], "time": [pd.to_datetime(transaction["timestamp"])]})
    prediction = model.predict(features)
    return prediction[0]

Example usage
transaction = {"amount": 100, "city": "New York", "state": "NY", "timestamp": "2023-02-15 14:30:00"}
if detect_fraud(transaction):
    print("Potential fraud detected!")
else:
    print("Transaction appearsÂ legitimate.")